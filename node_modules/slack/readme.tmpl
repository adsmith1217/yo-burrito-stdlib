<p align="center">
  <img width="333px" src=https://s3-us-west-1.amazonaws.com/bugbot/slack-js.svg>
</p>

[![npm](https://badge.fury.io/js/slack.svg)](https://www.npmjs.com/package/slack) [![bitHound Dependencies](https://www.bithound.io/github/smallwins/slack/badges/dependencies.svg)](https://www.bithound.io/github/smallwins/slack/master/dependencies/npm) [![Codeship CI](https://img.shields.io/codeship/3fd641e0-81f4-0133-c733-22940a7a47c6.svg)](https://codeship.com/projects/121411) 

### Slack [Web](https://api.slack.com/methods) and [RTM](https://api.slack.com/rtm) API client. :seedling::raised_hands::two_hearts:

- Written in ES2015 JS, published as ES5, tested for Node and the browser
- Web API is all pure functions *(no stateful things like classes or using `new`)*
- RTM API has a thin wrapper for `WebSocket` *(also tested for Node and the browser!)*
- Perfect symmetry *(low level: method signatures match API docs method signatures are node-style callbacks)*
- Opt in *(selectively use the parts of the api surface you want without the entire payload)*
- Well tested, CI, and Apache2 licensed

## Install :star2::package:

```
npm i slack
```

# Usage :sparkles::rocket:

`slack` is tested for Node and the browser.

```javascript
var slack = require('slack')

// logs {args:{hello:'world'}}
slack.api.test({hello:'world'}, console.log)
```

Usage with ES2015 works well too; `slack` itself is written with [Babel](http://babeljs.io/). You can also specify only the methods you need which can trim the payload if you are using `slack` in the browser.

```javascript
// only import the specific method you need
import test from 'slack/methods/api.test'

// logs {args:{hyper:'card'}}
test({hyper:'card'}, console.log)
```

Starting an RTM session:

```javascript
import slack from 'slack'

let bot = slack.rtm.client()
let token = process.env.SLACK_TOKEN

bot.hello(message=> {
  console.log(`Got a message: ${message}`)
  bot.close()
})

bot.listen({token})
```

The entire [RTM event API](https://api.slack.com/rtm) is supported.

### Test Setup :lock::key::point_left:

Clone this repo and create a file called `.env` in the root with the following:

```
SLACK_TOKEN=xxxx
SLACK_BOT_TOKEN=xxxx
SLACK_CLIENT_ID=xxxx
SLACK_CLIENT_SECRET=xxxx
```

You can get a `SLACK_TOKEN` for testing [here](https://api.slack.com/web). You need to register an app for a `SLACK_CLIENT_ID` and `SLACK_CLIENT_SECRET`. The tests require the app to have the `channels:history` scope.

## Testing :green_heart::green_heart::green_heart:

:point_right: In Node:

```
npm test
```

:point_right: Or the browser:

```
npm run btest
```

:point_right: Or kick up a REPL and poke around:

<img-src=https://s3-us-west-1.amazonaws.com/bugbot/slack-repl.png>

# Slack Web API :tada::honeybee::triangular_flag_on_post:

The entire Slack Web API is supported. All method signatures accept a `params` object and Node style callback. Required params are documented inline below.

{{#methods}}
- `{{{.}}}`
{{/methods}}

# Slack RTM API

`slack.rtm.client()` is a factory method that returns an thinly wrapped WebSocket instance with helpers for registering callbacks to [Slack RTM events](https://api.slack.com/events).

```javascript
var slack = require('slack')
var bot = slack.rtm.client()
var token = process.env.SLACK_TOKEN

// logs: ws, started, close, listen, etc... in addition to the RTM event handler methods
console.log(Object.keys(bot))

// do something with the rtm.start payload
bot.started(function(payload) {
  console.log('payload from rtm.start', payload)
})

// respond to a user_typing message
bot.user_typing(function(msg) {
  console.log('several people are coding', msg)
})

// start listening to the slack team associated to the token
bot.listen({token:token})
```

Try it out by running `npm start`:

<img src=https://s3-us-west-1.amazonaws.com/bugbot/repl-rtm.png>

#### RTM Client API

- `bot.ws` is a `WebSocket` instance constructed from `slack/methods/rtm.start` payload
- `bot.started(payload=>)` fires after `rtm.start` payload response is received and socket established
- `bot.close()` closes the `WebSocket`
- `bot.listen({token})` initiates the `slack/methods/rtm.start` handshake and delegates all messages

#### RTM Events

Each of these are methods on `bot` for registering handlers for the events of the same name.

{{#events}}
- `{{{.}}}`
{{/events}}


# Contributing

Most of the code for the client is generated by scraping the [Slack API documentation](https://api.slack.com/methods).
Regenerate from the latest Slack documentation by running :runner::

```
npm run generate
```

Portions of this README are generated as well; to make edits, update `readme.tmpl`
and run the same command :cloud::umbrella::sunny::sunflower:.
